# coding: utf-8

"""
    Proxmox

    Proxmox VPS provider  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: webmaster@listes.minet.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HistoryIdItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"ip": "str", "_date": "str", "user_id": "float", "vm_id": "float"}

    attribute_map = {"ip": "ip", "_date": "date", "user_id": "userId", "vm_id": "VmId"}

    def __init__(self, ip=None, _date=None, user_id=None, vm_id=None):  # noqa: E501
        """HistoryIdItem - a model defined in Swagger"""  # noqa: E501
        self._ip = None
        self.__date = None
        self._user_id = None
        self._vm_id = None
        self.discriminator = None
        self.ip = ip
        self._date = _date
        if user_id is not None:
            self.user_id = user_id
        if vm_id is not None:
            self.vm_id = vm_id

    @property
    def ip(self):
        """Gets the ip of this HistoryIdItem.  # noqa: E501

        dns entry  # noqa: E501

        :return: The ip of this HistoryIdItem.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this HistoryIdItem.

        dns entry  # noqa: E501

        :param ip: The ip of this HistoryIdItem.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def _date(self):
        """Gets the _date of this HistoryIdItem.  # noqa: E501

        entry to this ip  # noqa: E501

        :return: The _date of this HistoryIdItem.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this HistoryIdItem.

        entry to this ip  # noqa: E501

        :param _date: The _date of this HistoryIdItem.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError(
                "Invalid value for `_date`, must not be `None`"
            )  # noqa: E501

        self.__date = _date

    @property
    def user_id(self):
        """Gets the user_id of this HistoryIdItem.  # noqa: E501

        userId  # noqa: E501

        :return: The user_id of this HistoryIdItem.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this HistoryIdItem.

        userId  # noqa: E501

        :param user_id: The user_id of this HistoryIdItem.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    @property
    def vm_id(self):
        """Gets the vm_id of this HistoryIdItem.  # noqa: E501

        vmId  # noqa: E501

        :return: The vm_id of this HistoryIdItem.  # noqa: E501
        :rtype: float
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this HistoryIdItem.

        vmId  # noqa: E501

        :param vm_id: The vm_id of this HistoryIdItem.  # noqa: E501
        :type: float
        """

        self._vm_id = vm_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(HistoryIdItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryIdItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
