# coding: utf-8

"""
    Proxmox

    Proxmox VPS provider  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: webmaster@listes.minet.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_dns(self, **kwargs):  # noqa: E501
        """create dns entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DnsItem body: Dns entry to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_dns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_dns_with_http_info(self, **kwargs):  # noqa: E501
        """create dns entry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DnsItem body: Dns entry to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/dns",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_vm(self, **kwargs):  # noqa: E501
        """create vm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VmItem body: VM to create
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_vm_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_vm_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_vm_with_http_info(self, **kwargs):  # noqa: E501
        """create vm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VmItem body: VM to create
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vm" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/vm",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_dns_id(self, dnsid, **kwargs):  # noqa: E501
        """delete dns entry by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_id(dnsid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dnsid: id of the dns entry to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_dns_id_with_http_info(dnsid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_id_with_http_info(dnsid, **kwargs)  # noqa: E501
            return data

    def delete_dns_id_with_http_info(self, dnsid, **kwargs):  # noqa: E501
        """delete dns entry by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_id_with_http_info(dnsid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dnsid: id of the dns entry to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["dnsid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'dnsid' is set
        if "dnsid" not in params or params["dnsid"] is None:
            raise ValueError(
                "Missing the required parameter `dnsid` when calling `delete_dns_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "dnsid" in params:
            path_params["dnsid"] = params["dnsid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/dns/{dnsid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_vm_id(self, vmid, **kwargs):  # noqa: E501
        """delete vm by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vm_id(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to get (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_vm_id_with_http_info(vmid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vm_id_with_http_info(vmid, **kwargs)  # noqa: E501
            return data

    def delete_vm_id_with_http_info(self, vmid, **kwargs):  # noqa: E501
        """delete vm by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vm_id_with_http_info(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to get (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["vmid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vm_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'vmid' is set
        if "vmid" not in params or params["vmid"] is None:
            raise ValueError(
                "Missing the required parameter `vmid` when calling `delete_vm_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "vmid" in params:
            path_params["vmid"] = params["vmid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/vm/{vmid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_vm_id_with_error(self, vmid, **kwargs):  # noqa: E501
        """delete_vm_id_with_error  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vm_id_with_error(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_vm_id_with_error_with_http_info(
                vmid, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_vm_id_with_error_with_http_info(
                vmid, **kwargs
            )  # noqa: E501
            return data

    def delete_vm_id_with_error_with_http_info(self, vmid, **kwargs):  # noqa: E501
        """delete_vm_id_with_error  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vm_id_with_error_with_http_info(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["vmid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vm_id_with_error" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'vmid' is set
        if "vmid" not in params or params["vmid"] is None:
            raise ValueError(
                "Missing the required parameter `vmid` when calling `delete_vm_id_with_error`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "vmid" in params:
            path_params["vmid"] = params["vmid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/vmWithError/{vmid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_dns(self, **kwargs):  # noqa: E501
        """get all user's dns entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[DnsEntryItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_dns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dns_with_http_info(self, **kwargs):  # noqa: E501
        """get all user's dns entries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[DnsEntryItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_dns" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/dns",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DnsEntryItem]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_dns_id(self, dnsid, **kwargs):  # noqa: E501
        """get a dns entry by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_id(dnsid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dnsid: id of the dns entry entry to get (required)
        :return: DnsItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_dns_id_with_http_info(dnsid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_id_with_http_info(dnsid, **kwargs)  # noqa: E501
            return data

    def get_dns_id_with_http_info(self, dnsid, **kwargs):  # noqa: E501
        """get a dns entry by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_id_with_http_info(dnsid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dnsid: id of the dns entry entry to get (required)
        :return: DnsItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["dnsid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'dnsid' is set
        if "dnsid" not in params or params["dnsid"] is None:
            raise ValueError(
                "Missing the required parameter `dnsid` when calling `get_dns_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "dnsid" in params:
            path_params["dnsid"] = params["dnsid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/dns/{dnsid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DnsItem",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_historyip(self, vmid, **kwargs):  # noqa: E501
        """get the ip history of a vm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historyip(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to get history (required)
        :return: list[HistoryIdItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_historyip_with_http_info(vmid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_historyip_with_http_info(vmid, **kwargs)  # noqa: E501
            return data

    def get_historyip_with_http_info(self, vmid, **kwargs):  # noqa: E501
        """get the ip history of a vm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historyip_with_http_info(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to get history (required)
        :return: list[HistoryIdItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["vmid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_historyip" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'vmid' is set
        if "vmid" not in params or params["vmid"] is None:
            raise ValueError(
                "Missing the required parameter `vmid` when calling `get_historyip`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "vmid" in params:
            path_params["vmid"] = params["vmid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/history/{vmid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[HistoryIdItem]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_historyipall(self, **kwargs):  # noqa: E501
        """get the ip history of all the vm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historyipall(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HistoryIdItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_historyipall_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_historyipall_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_historyipall_with_http_info(self, **kwargs):  # noqa: E501
        """get the ip history of all the vm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historyipall_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HistoryIdItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_historyipall" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/historyall",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[HistoryIdItem]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_ip_list(self, **kwargs):  # noqa: E501
        """get the list of a users ip addresses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ip_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HistoryIdItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_ip_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ip_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ip_list_with_http_info(self, **kwargs):  # noqa: E501
        """get the list of a users ip addresses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ip_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[HistoryIdItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ip_list" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/ips",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[HistoryIdItem]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_vm(self, filter, **kwargs):  # noqa: E501
        """get all user vms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vm(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: filter to use (required)
        :return: list[VmIdItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_vm_with_http_info(filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vm_with_http_info(filter, **kwargs)  # noqa: E501
            return data

    def get_vm_with_http_info(self, filter, **kwargs):  # noqa: E501
        """get all user vms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vm_with_http_info(filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: filter to use (required)
        :return: list[VmIdItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["filter"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_vm" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'filter' is set
        if "filter" not in params or params["filter"] is None:
            raise ValueError(
                "Missing the required parameter `filter` when calling `get_vm`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/vm",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[VmIdItem]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_vm_id(self, vmid, **kwargs):  # noqa: E501
        """get a vm by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vm_id(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to get (required)
        :return: VmItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_vm_id_with_http_info(vmid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vm_id_with_http_info(vmid, **kwargs)  # noqa: E501
            return data

    def get_vm_id_with_http_info(self, vmid, **kwargs):  # noqa: E501
        """get a vm by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vm_id_with_http_info(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to get (required)
        :return: VmItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["vmid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vm_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'vmid' is set
        if "vmid" not in params or params["vmid"] is None:
            raise ValueError(
                "Missing the required parameter `vmid` when calling `get_vm_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "vmid" in params:
            path_params["vmid"] = params["vmid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/vm/{vmid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="VmItem",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def is_cotisation_uptodate(self, **kwargs):  # noqa: E501
        """check is the cotisation is up to date for a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_cotisation_uptodate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.is_cotisation_uptodate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.is_cotisation_uptodate_with_http_info(**kwargs)  # noqa: E501
            return data

    def is_cotisation_uptodate_with_http_info(self, **kwargs):  # noqa: E501
        """check is the cotisation is up to date for a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_cotisation_uptodate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method is_cotisation_uptodate" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/cotisation",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_vm(self, vmid, **kwargs):  # noqa: E501
        """update a vm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_vm(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to update (required)
        :param VmItem body: VM to update
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_vm_with_http_info(vmid, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_vm_with_http_info(vmid, **kwargs)  # noqa: E501
            return data

    def patch_vm_with_http_info(self, vmid, **kwargs):  # noqa: E501
        """update a vm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_vm_with_http_info(vmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vmid: vmid to update (required)
        :param VmItem body: VM to update
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["vmid", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_vm" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'vmid' is set
        if "vmid" not in params or params["vmid"] is None:
            raise ValueError(
                "Missing the required parameter `vmid` when calling `patch_vm`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "vmid" in params:
            path_params["vmid"] = params["vmid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["OAuth2"]  # noqa: E501

        return self.api_client.call_api(
            "/vm/{vmid}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
