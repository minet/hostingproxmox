# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from proxmox_api.models.base_model_ import Model
from proxmox_api import util


class VmItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, type: str=None, user: str=None, password: str=None, ssh: bool=None, ssh_key: str=None, ip: str=None, status: str=None):  # noqa: E501
        """VmItem - a model defined in Swagger

        :param name: The name of this VmItem.  # noqa: E501
        :type name: str
        :param type: The type of this VmItem.  # noqa: E501
        :type type: str
        :param user: The user of this VmItem.  # noqa: E501
        :type user: str
        :param password: The password of this VmItem.  # noqa: E501
        :type password: str
        :param ssh: The ssh of this VmItem.  # noqa: E501
        :type ssh: bool
        :param ssh_key: The ssh_key of this VmItem.  # noqa: E501
        :type ssh_key: str
        :param ip: The ip of this VmItem.  # noqa: E501
        :type ip: str
        :param status: The status of this VmItem.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'user': str,
            'password': str,
            'ssh': bool,
            'ssh_key': str,
            'ip': str,
            'status': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'user': 'user',
            'password': 'password',
            'ssh': 'ssh',
            'ssh_key': 'sshKey',
            'ip': 'ip',
            'status': 'status'
        }
        self._name = name
        self._type = type
        self._user = user
        self._password = password
        self._ssh = ssh
        self._ssh_key = ssh_key
        self._ip = ip
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'VmItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VmItem of this VmItem.  # noqa: E501
        :rtype: VmItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this VmItem.

        vm name  # noqa: E501

        :return: The name of this VmItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this VmItem.

        vm name  # noqa: E501

        :param name: The name of this VmItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this VmItem.

        type of vm  # noqa: E501

        :return: The type of this VmItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this VmItem.

        type of vm  # noqa: E501

        :param type: The type of this VmItem.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def user(self) -> str:
        """Gets the user of this VmItem.

        user of vm  # noqa: E501

        :return: The user of this VmItem.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this VmItem.

        user of vm  # noqa: E501

        :param user: The user of this VmItem.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def password(self) -> str:
        """Gets the password of this VmItem.

        password of vm  # noqa: E501

        :return: The password of this VmItem.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this VmItem.

        password of vm  # noqa: E501

        :param password: The password of this VmItem.
        :type password: str
        """

        self._password = password

    @property
    def ssh(self) -> bool:
        """Gets the ssh of this VmItem.

        ssh key auth  # noqa: E501

        :return: The ssh of this VmItem.
        :rtype: bool
        """
        return self._ssh

    @ssh.setter
    def ssh(self, ssh: bool):
        """Sets the ssh of this VmItem.

        ssh key auth  # noqa: E501

        :param ssh: The ssh of this VmItem.
        :type ssh: bool
        """

        self._ssh = ssh

    @property
    def ssh_key(self) -> str:
        """Gets the ssh_key of this VmItem.

        ssh pub key for auth  # noqa: E501

        :return: The ssh_key of this VmItem.
        :rtype: str
        """
        return self._ssh_key

    @ssh_key.setter
    def ssh_key(self, ssh_key: str):
        """Sets the ssh_key of this VmItem.

        ssh pub key for auth  # noqa: E501

        :param ssh_key: The ssh_key of this VmItem.
        :type ssh_key: str
        """

        self._ssh_key = ssh_key

    @property
    def ip(self) -> str:
        """Gets the ip of this VmItem.

        vm public ip  # noqa: E501

        :return: The ip of this VmItem.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this VmItem.

        vm public ip  # noqa: E501

        :param ip: The ip of this VmItem.
        :type ip: str
        """

        self._ip = ip

    @property
    def status(self) -> str:
        """Gets the status of this VmItem.

        vm status  # noqa: E501

        :return: The status of this VmItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this VmItem.

        vm status  # noqa: E501

        :param status: The status of this VmItem.
        :type status: str
        """

        self._status = status
