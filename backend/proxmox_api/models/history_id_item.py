# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from proxmox_api.models.base_model_ import Model
from proxmox_api import util


class HistoryIdItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ip: str=None, _date: str=None, user_id: float=None, vm_id: float=None):  # noqa: E501
        """HistoryIdItem - a model defined in Swagger

        :param ip: The ip of this HistoryIdItem.  # noqa: E501
        :type ip: str
        :param _date: The _date of this HistoryIdItem.  # noqa: E501
        :type _date: str
        :param user_id: The user_id of this HistoryIdItem.  # noqa: E501
        :type user_id: float
        :param vm_id: The vm_id of this HistoryIdItem.  # noqa: E501
        :type vm_id: float
        """
        self.swagger_types = {
            'ip': str,
            '_date': str,
            'user_id': float,
            'vm_id': float
        }

        self.attribute_map = {
            'ip': 'ip',
            '_date': 'date',
            'user_id': 'userId',
            'vm_id': 'VmId'
        }
        self._ip = ip
        self.__date = _date
        self._user_id = user_id
        self._vm_id = vm_id

    @classmethod
    def from_dict(cls, dikt) -> 'HistoryIdItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HistoryIdItem of this HistoryIdItem.  # noqa: E501
        :rtype: HistoryIdItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this HistoryIdItem.

        dns entry  # noqa: E501

        :return: The ip of this HistoryIdItem.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this HistoryIdItem.

        dns entry  # noqa: E501

        :param ip: The ip of this HistoryIdItem.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def _date(self) -> str:
        """Gets the _date of this HistoryIdItem.

        entry to this ip  # noqa: E501

        :return: The _date of this HistoryIdItem.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this HistoryIdItem.

        entry to this ip  # noqa: E501

        :param _date: The _date of this HistoryIdItem.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def user_id(self) -> float:
        """Gets the user_id of this HistoryIdItem.

        userId  # noqa: E501

        :return: The user_id of this HistoryIdItem.
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: float):
        """Sets the user_id of this HistoryIdItem.

        userId  # noqa: E501

        :param user_id: The user_id of this HistoryIdItem.
        :type user_id: float
        """

        self._user_id = user_id

    @property
    def vm_id(self) -> float:
        """Gets the vm_id of this HistoryIdItem.

        vmId  # noqa: E501

        :return: The vm_id of this HistoryIdItem.
        :rtype: float
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id: float):
        """Sets the vm_id of this HistoryIdItem.

        vmId  # noqa: E501

        :param vm_id: The vm_id of this HistoryIdItem.
        :type vm_id: float
        """

        self._vm_id = vm_id
