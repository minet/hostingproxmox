openapi: 3.0.0
info:
  title: Proxmox
  description: Proxmox VPS provider
  contact:
    email: webmaster@listes.minet.net
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://backprox.minet.net/api/1.0.0
  description: Main URL
security:
- OAuth2: []
paths:
  /vm:
    get:
      summary: get all user vms
      operationId: get_vm
      parameters:
      - name: search
        in: query
        description: filter to use
        required: false
        style: form
        explode: true 
        schema:
          type: string
          example: "My super VM name"
      responses:
        "201":
          description: all user vms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmIdItem'
                x-content-type: application/json
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    post:
      summary: create vm
      operationId: create_vm
      requestBody:
        description: VM to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmItem'
      responses:
        "201":
          description: created
        "400":
          description: "invalid input, object invalid"
        "409":
          description: a vm already exists
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /vm/{vmid}:
    get:
      summary: get a vm by id
      operationId: get_vm_id
      parameters:
      - name: vmid
        in: path
        description: vmid to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "105"
      responses:
        "201":
          description: get vm by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmItem'
        "400":
          description: "invalid input, object invalid"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    delete:
      summary: delete vm by id
      operationId: delete_vm_id
      parameters:
      - name: vmid
        in: path
        description: vmid to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "105"
      responses:
        "201":
          description: deleted vm by id
        "400":
          description: "invalid input, object invalid"
        "404":
          description: vm not found
        "500":
          description: An internal error occured
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    patch:
      summary: update a vm
      operationId: patch_vm
      parameters:
      - name: vmid
        in: path
        description: vmid to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "105"
      requestBody:
        description: VM to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmItem'
      responses:
        "201":
          description: updated
        "400":
          description: "invalid input, object invalid"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /vmWithError/{vmid}:
    delete:
      operationId: delete_vm_id_with_error
      parameters:
      - name: vmid
        in: path
        description: vmid to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "105"
      responses:
        "201":
          description: deleted vm by id
        "400":
          description: "invalid input, object invalid"
        "404":
          description: vm not found
        "500":
          description: An internal error occured
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /dns:
    get:
      summary: get all user's dns entries
      operationId: get_dns
      responses:
        "201":
          description: all user's dns entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DnsEntryItem'
                x-content-type: application/json
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    post:
      summary: create dns entry
      operationId: create_dns
      requestBody:
        description: Dns entry to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsItem'
      responses:
        "201":
          description: created
        "400":
          description: "invalid input, object invalid"
        "409":
          description: a vm already exists
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /needToBeRestored/{vmid}:
    get:
      summary : Get the restore status of a vm
      operationId : get_need_to_be_restored
      parameters :
        - name : vmid
          in : path 
          description: vmid to get restore status
          required : true
          style : simple
          explode : false
          schema :
            type : string
            example : "105"
      responses:
        "200":
          description: get storage status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmIdItem'
                x-content-type: application/json
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /updateCredentials:
    post:
      summary: Update the creds of a vm
      operationId: update_credentials
      requestBody:
        description:  Update the creds of a vm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmItem'
      responses:
        "200":
          description: updated
        "400":
          description: "invalid input, object invalid"
        "409":
          description: a vm already exists
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /history/{vmid}:
    get:
      summary: get the ip history of a vm
      operationId: get_historyip
      parameters:
        - name: vmid
          in: path
          description: vmid to get history
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: "105"
      responses:
        "201":
          description: get historyip for vmid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryIdItem'
                x-content-type: application/json
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /ips:
    get:
      summary: get the list of a users ip addresses
      operationId: get_ip_list
      responses:
        "200":
          description: The list is returned with success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryIdItem'
                x-content-type: application/json
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
      
  /cotisation:
    get:
      summary: check is the cotisation is up to date for a user
      operationId: is_cotisation_uptodate
      responses:
        "201":
          description: return 1 if okay, return 0 if not
        "400":
          description: "invalid input, object invalid, adherent not found"
        "403":
          description: "not enough permissions"
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /historyall:
    get:
      summary: get the ip history of all the vm
      operationId: get_historyipall
      responses:
        "201":
          description: get historyip for all vm
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryIdItem'
                x-content-type: application/json
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /dns/{dnsid}:
    get:
      summary: get a dns entry by id
      operationId: get_dns_id
      parameters:
      - name: dnsid
        in: path
        description: id of the dns entry entry to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "2"
      responses:
        "201":
          description: get dns entry by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsItem'
        "400":
          description: "invalid input, object invalid"
        "404":
          description: dns entry not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    delete:
      summary: delete dns entry by id
      operationId: delete_dns_id
      parameters:
      - name: dnsid
        in: path
        description: id of the dns entry to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "3"
      responses:
        "201":
          description: deleted dns entry by id
        "400":
          description: "invalid input, object invalid"
        "404":
          description: dns entry not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
components:
  schemas:
    VmIdItem:
      required:
      - id
      type: object
      properties:
        id:
          type: number
          description: VM id
          example: 105
      example:
        id: 105
    DnsEntryItem:
      required:
      - entry
      type: object
      properties:
        entry:
          type: string
          description: dns entry
          example: host
      example:
        entry: host
    DnsItem:
      required:
      - entry
      - ip
      type: object
      properties:
        entry:
          type: string
          description: dns entry
          example: host
        ip:
          type: string
          description: entry to this ip
          example: 192.0.0.1
      example:
        entry: host
        ip: 192.0.0.1
    HistoryIdItem:
      required:
        - ip
        - date
      type: object
      properties:
        ip:
          type: string
          description: dns entry
          example: 157.159.195.34
        date:
          type: string
          description: entry to this ip
          example: "18/07/2021 15:34:23"
        userId:
          type: number
          description: userId
          example: 3
        VmId:
          type: number
          description: vmId
          example: 3
      example:
        ip: 157.159.195.34
        date: "18/07/2021 15:34:23"
        userId: 1
        vmId: 2
    VmItem:
      type: object
      properties:
        name:
          type: string
          description: vm name
          example: vm
        type:
          type: string
          description: type of vm
          example: "wordpress, bare_vm"
        user:
          type: string
          description: user of vm
          example: user1
        password:
          type: string
          description: password of vm
          example: salut
        sshKey:
          type: string
          description: ssh pub key for auth
          example: ssh-rsa ...
        ip:
          type: string
          description: vm public ip
          example: 192.1.1.1
        cpu:
          type: number
          description: total VM's cpu
          example: 2
        ram:
          type: number
          description: total VM's ram in MiO
          example: 1024
        disk:
          type: number
          description: total VM's disk size in GiO
          example: 10
        autoreboot:
          type: boolean
          description: vm autoreboot value
          example: true
        status:
          type: string
          description: vm status
          example: running
        cpu_usage:
          type: number
          description: cpu usage in percent
        ram_usage:
          type: number
          description: ram usage in percent
          example: 10
        uptime:
          type: number
          description: VM's uptime in sec
          example: 87545
        created_on:
          type: string
          description: creation date of the VM
          example: 15-05-2021
      example:
        ip: 192.1.1.1
        cpu: 2
        type: "wordpress, bare_vm"
        uptime: 87545
        password: salut
        disk: 10
        sshKey: ssh-rsa ...
        ram_usage: 10
        created_on: 15-05-2021
        name: vm
        cpu_usage: 0.8008281904610115
        user: user1
        ram: 1024
        status: running
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://cas.minet.net/oidc/authorize
          scopes:
            profile: "The user's basic information, including groups they are a part\
              \ of"
            admin: "Scope for admin users"
      x-tokenInfoFunc: proxmox_api.controllers.authorization_controller.check_OAuth2
      x-scopeValidateFunc: proxmox_api.controllers.authorization_controller.validate_scope_OAuth2
