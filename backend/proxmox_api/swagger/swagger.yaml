openapi: 3.0.0
info:
  title: API hosting
  description: Cloud hosting MiNET plateform
  contact:
    email: webmaster@minet.net
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "2.0"
servers:
- url: https://api-hosting.minet.net/2.0
  description: Main URL
- url: https://api-hosting-dev.minet.net/2.0
  description: dev URL
- url: http://127.0.0.1:8080/2.0
  description: local URL
security:
- OAuth2: []
paths:
  /vm:
    get:
      summary: Retrieve the list of all VM of a user. For admin, the returned list is the one of all VMs. The optionnal parameter 'filter' can be used to filter of VM's id, name or owner.
      operationId: get_vm
      tags:
          - VM
      parameters:
      - name: search
        in: query
        description: optional filter that can be applied on the users list
        required: false
        style: form
        explode: true 
        schema:
          type: string
          example: "VM's  id, Vm's name or owner's name"
      responses:
        "200":
          description: vmid list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  description: Array of int
                example: [1, 2, 3, 4, 5]
                x-content-type: application/json                
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    post:
      summary: Create a vm
      tags:
          - VM
      operationId: create_vm
      requestBody:
        description: Create a VM with the given specifications
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmItem'
      responses:
        "201":
          description: VM creation began
        "400":
          description: "invalid input, missing parameters"
        "403":
          description: "Forbidden or not enough ressources left"
        "409":
          description: a vm already exists
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /vm/{vmid}:
    get:
      summary: get a vm by id
      operationId: get_vm_id
      tags:
          - VM
      parameters:
      - name: vmid
        in: path
        description: id of the vm to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 105
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: vm status
                    example: running
                  cpu_usage:
                    type: number
                    description: cpu usage in percent
                    example: 20%
                  ram_usage:
                    type: number
                    description: ram usage in percent
                    example: 10%
                  uptime:
                    type: number
                    description: VM's uptime in sec
                    example: 87545
                  created_on:
                    type: string
                    description: creation date of the VM
                    example: 15-05-2021
                  ip:
                    type: string
                    description: vm public ip
                    example: 157.159.195.0
                  autoreboot:
                    type: boolean
                    description: vm autoreboot value
                    example: true
                  name:
                    type: string
                    description: Name of the VM
                    example: my-website
                  type:
                    type: string
                    description: Type of the vm
                    example: "wordpress or bare_vm"
                  owner:
                    type: string
                    description: owner of the vm
                    example: adh6_username
                  cpu:
                    type: number
                    description: total VM's cpu.  Ressources must be available in the user's quota
                    example: 2
                  ram:
                    type: number
                    description: total VM's ram in Mo.  Ressources must be available in the user's quota
                    example: 1024
                  disk:
                    type: number
                    description: total VM's disk size in Go. It can be 10, 20 or 30. Ressources must be available in the user's quota
                    example: 20
                  unsecure:
                    type: boolean
                    description: tell if the VM if flagged as unsecure
                    example: true
                  last_backup_date:
                    type: string
                    description: last backup date from this VM
                    example: 15-05-2021
        "400":
          description: "invalid input, missing parameters"
        "403":
          description: "Forbidden"
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    delete:
      summary: delete vm by id
      operationId: delete_vm_id
      tags:
          - VM
      parameters:
      - name: vmid
        in: path
        description: vmid to delete
        required: true
        style: simple
        explode: false
        schema:
          type: number
          example: 105
      responses:
        "200":
          description: VM deletion process started
        "400":
          description: "invalid input, invalid parameters"
        "403":
          description: Forbidden
        "404":
          description: vm not found
        "500":
          description: An internal error occured
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    patch:
      summary: Apply modification on a VM
      operationId: patch_vm
      tags:
          - VM
      parameters:
      - name: vmid
        in: path
        description: id of the vm
        required: true
        style: simple
        explode: false
        schema:
          type: number
          example: 105
      requestBody:
        description: Action to apply on the VM. It can be used to start, reboot or stop the vm, change the start on boot setting, or transfer the ownership of the VM
        content:
          application/json:
            schema:
                type: object
                properties:
                  status:
                    type: string
                    description: action to apply
                    example: start, reboot, stop, switch_autoreboot, transfering_ownership
                  user:
                     type: string
                     description: user to transfer the VM to
                     example: adh6_username (only in case of vm transfer)
      responses:
        "201":
          description: updated
        "400":
          description: "invalid input, missing parameters"
        "403":
          description: Action forbidden
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /account_state/{username}:
    get:
      summary : get the freeze state of a user account 
      operationId: get_account_state
      tags:
          - User
      parameters:
        - name: username
          in: path
          description: username to get account state 
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: "username"
      responses : 
        "200" :
          description : "The freeze state of the account"
          content:
            application/json:
              schema:
                type: object
                properties:
                  freezeState:
                    type: number
                    description: freezeState of the user
                    example: 0
                x-content-type: application/json
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /max_account_ressources:
    get:
      summary : max ressources a single account can have
      operationId: get_account_max_ressources
      tags:
          - User
      responses : 
        "200" :
          description : 'max ressources a single account can have, {"cpu_max": ressource.cpu, "ram_max": ressource.ram, "storage_max": ressource.storage}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cpu_max:
                    type: number
                    description: maximum cpu a user can have in total (quota per account)
                    example: 6
                  ram_max:
                    type: number
                    description: maximum ram a user can have in total (quota per account) in Go
                    example: 9
                  storage_max:
                    type: number
                    description: maximum ram a user can have in total (quota per account) in Go
                    example: 30
                x-content-type: application/json
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /vmWithError/{vmid}:
    delete:
      summary : delete a VM in the context of an error in proxmox or in th db related to this vm. It uses a different approach of deleting to solve the issue
      operationId: delete_vm_id_with_error
      tags:
          - VM
      parameters:
      - name: vmid
        in: path
        description: id of the vm to delete
        required: true
        style: simple
        explode: false
        schema:
          type: number
          example: 105
      responses:
        "201":
          description: deletion process started
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "Forbidden"
        "404":
          description: vm not found
        "500":
          description: An internal error occured
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /dns:
    get:
      summary: get all user's dns entries. For admin, it returns all dns entries
      operationId: get_dns
      tags:
          - DNS
      responses:
        "201":
          description: return all dns entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DnsEntryItem'
                x-content-type: application/json
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    post:
      summary: create a dns entry
      operationId: create_dns
      tags:
          - DNS
      requestBody:
        description: Dns entry to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsItem'
      responses:
        "201":
          description: created
        "400":
          description: "invalid input, object invalid"
        "409":
          description: a vm already exists
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /needToBeRestored/{vmid}:
    get:
      summary : Get the restore status of a vm. It is used if a VM has been deleted by accident and a backup restore is needed
      operationId : get_need_to_be_restored
      tags:
          - VM
      parameters :
        - name : vmid
          in : path 
          description: vmid to get restore status
          required : true
          style : simple
          explode : false
          schema :
            type : number
            example : 105
      responses:
        "200":
          description: get restore status
          content:
            application/json:
              schema:
                type: object
                properties:
                  need_to_be_restored:
                    type: boolean
                    description: need to be restored boolean status
                    example: true
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /updateCredentials:
    post:
      summary: Update the creds of a vm
      operationId: update_credentials
      tags:
          - VM
      requestBody:
        description:  Update the creds of a vm
        content:
          application/json:
            schema:
                type: object
                properties:
                  vmid:
                    type: number
                    description: id of the vm targeted
                    example: 105
                  username:
                    type: string
                    description: new username
                    example: "new_username"
                  password:
                    type: string
                    description: new password
                    example: "new_password"
                  sshKey:
                    type: string
                    description: new ssk key
                    example: "ssh-rsa ..."
      responses:
        "200":
          description: updated
        "400":
          description: "invalid input, missing paramaters or parameters don't match requirements"
        "403":
          description: "Forbidden"
        "409":
          description: a vm already exists
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /renew-ip:
    post:
      summary: Renew the ip address of a VM on cloud init 
      operationId: renew_ip
      tags:
          - VM
      requestBody:
        description: Renew the ip address of a VM on cloud init 
        content:
          application/json:
            schema:
               type: object
               properties:
                  vmid:
                    type: number
                    description: id of the vm targeted
                    example: 105
      responses:
        "200":
          description: renewed
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "Forbidden"
        "500":
          description: an error occur while renewing the VM
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /history/{vmid}:
    get:
      summary: get the ip history of a vm
      operationId: get_historyip
      tags:
          - VM
      parameters:
        - name: vmid
          in: path
          description: vmid to get history
          required: true
          style: simple
          explode: false
          schema:
            type: number
            example: 105
      responses:
        "201":
          description: get historyip for vmid
          content:
            application/json:
              schema:
                type: array
                items:
                    type: string
                    description: array of array 
                    example: [157.159.195.X,YYYY-MM-DD,username,vm_id]
                x-content-type: application/json
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /ips:
    get:
      summary: get the list of a user ip addresses
      operationId: get_ip_list
      tags:
          - User
      responses:
        "200":
          description: The list is returned with success
          content:
            application/json:
              schema:
               type: object
               properties:
                  ip_list:
                    type: array
                    description: List of all IPs of a user
                    example: ["157.159.195.X", "157.159.195.Y"]
              x-content-type: application/json
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /notification:
    get:
      summary: Try to fetch a notification to display for the user
      operationId: get_notification
      security: [] 
      tags:
          - User
      responses:
        "200":
          description: Notification recieved and ready to be displayed
          content:
            application/json:
             schema:
               type: object
               properties:
                  title:
                    type: string
                    description: Title of the notification
                    example: "Notification title"
                  message:
                    type: string
                    description: Title of the notification
                    example: "Notification message"
                  criticity:
                    type: number
                    description: Criticity of the Notification (1,2,3 or 4)
                    example: 3
                  active:
                    type: boolean
                    description: If true, the notification is displayed on all devices
                    example: true
               x-content-type: application/json
        "204":
          description: "No notificaton, used for user only. Admin will always get a 200 response"
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    patch:
        summary: Modify the notification (for admin only)
        operationId: put_notification
        tags:
            - User
        responses:
          "201":
            description: Notification modified
          "204":
            description: "No notificaton"
        x-openapi-router-controller: proxmox_api.controllers.default_controller
      
  /historyall:
    get:
      summary: get the ip history of all the vm
      operationId: get_historyipall
      tags:
          - Admin
      responses:
        "201":
          description: get historyip for all vm
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryIdItem'
                x-content-type: application/json
        "400":
          description: "invalid input, object invalid"
        "403":
          description: "not enough permissions"
        "404":
          description: vm not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
  /dns/{dnsid}:
    get:
      summary: get a dns entry by id
      operationId: get_dns_id
      tags:
          - DNS
      parameters:
      - name: dnsid
        in: path
        description: id of the dns entry entry to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "2"
      responses:
        "201":
          description: get dns entry by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsItem'
        "400":
          description: "invalid input, object invalid"
        "404":
          description: dns entry not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
    delete:
      summary: delete dns entry by id
      operationId: delete_dns_id
      tags:
          - DNS
      parameters:
      - name: dnsid
        in: path
        description: id of the dns entry to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "3"
      responses:
        "201":
          description: deleted dns entry by id
        "400":
          description: "invalid input, object invalid"
        "404":
          description: dns entry not found
      x-openapi-router-controller: proxmox_api.controllers.default_controller
components:
  schemas:
    VmIdItem:
      required:
      - id
      type: object
      properties:
        id:
          type: number
          description: VM id
          example: 105
      example:
        id: 105
    DnsEntryItem:
      required:
      - entry
      type: object
      properties:
        entry:
          type: string
          description: dns entry
          example: host
      example:
        entry: host
    DnsItem:
      required:
      - entry
      - ip
      type: object
      properties:
        entry:
          type: string
          description: dns entry
          example: host
        ip:
          type: string
          description: entry to this ip
          example: 192.0.0.1
      example:
        entry: host
        ip: 192.0.0.1
    HistoryIdItem:
      required:
        - ip
        - date
      type: object
      properties:
        ip:
          type: string
          description: dns entry
          example: 157.159.195.34
        date:
          type: string
          description: entry to this ip
          example: "18/07/2021 15:34:23"
        userId:
          type: number
          description: userId
          example: 3
        VmId:
          type: number
          description: vmId
          example: 3
      example:
        ip: 157.159.195.34
        date: "18/07/2021 15:34:23"
        userId: 1
        vmId: 2
    VmItem:
      type: object
      properties:
        name:
          type: string
          description: Name of the VM
          example: my-website
        type:
          type: string
          description: Type of the vm
          example: "wordpress or bare_vm"
        user:
          type: string
          description: user of the vm
          example: username
        password:
          type: string
          description: password of the vm. It must respect the minimum requirement of a password
          example: P4ssw0rd#
        sshKey:
          type: string
          description: ssh public key for the user
          example: ssh-rsa ...
        cpu:
          type: number
          description: total VM's cpu.  Ressources must be available in the user's quota
          example: 2
        ram:
          type: number
          description: total VM's ram in Mo.  Ressources must be available in the user's quota
          example: 1024
        disk:
          type: number
          description: total VM's disk size in Go. It can be 10, 20 or 30. Ressources must be available in the user's quota
          example: 20
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://cas.minet.net/oidc/authorize
          scopes:
            profile: "The user's basic information, including groups they are a part\
              \ of"
            admin: "Scope for admin users"
      x-tokenInfoFunc: proxmox_api.controllers.authorization_controller.check_OAuth2
      x-scopeValidateFunc: proxmox_api.controllers.authorization_controller.validate_scope_OAuth2
